#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —ç–º–æ—Ü–∏–π
"""

import sys
import os
import tempfile
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from emotion_transition_analyzer import EmotionTransitionDetector, TransitionMetricsCalculator


def test_transition_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —ç–º–æ—Ü–∏–π...\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    detector = EmotionTransitionDetector()
    metrics_calculator = TransitionMetricsCalculator()
    
    print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ pipeline
    mock_video_emotions = [
        {'timestamp': 0.0, 'emotion': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å', 'confidence': 0.85},
        {'timestamp': 2.5, 'emotion': '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', 'confidence': 0.78},
        {'timestamp': 5.0, 'emotion': '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', 'confidence': 0.72},
        {'timestamp': 7.8, 'emotion': '–∑–ª–æ—Å—Ç—å', 'confidence': 0.88},  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è
        {'timestamp': 10.2, 'emotion': '–≥—Ä—É—Å—Ç—å', 'confidence': 0.65},
        {'timestamp': 12.5, 'emotion': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å', 'confidence': 0.82},
        {'timestamp': 15.0, 'emotion': '—Å—Ç—Ä–∞—Ö', 'confidence': 0.79},  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        {'timestamp': 17.3, 'emotion': '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', 'confidence': 0.88},  # –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏
        {'timestamp': 20.0, 'emotion': '—Å—á–∞—Å—Ç—å–µ', 'confidence': 0.45}   # –ù–µ–∫–æ–Ω–≥—Ä—É—ç–Ω—Ç–Ω–æ—Å—Ç—å
    ]
    
    mock_speech_emotions = [
        {'start_time': 0.0, 'end_time': 3.0, 'emotion': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å', 'confidence': 0.62},
        {'start_time': 3.0, 'end_time': 6.5, 'emotion': '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', 'confidence': 0.58},
        {'start_time': 6.5, 'end_time': 9.0, 'emotion': '–∑–ª–æ—Å—Ç—å', 'confidence': 0.71},
        {'start_time': 9.0, 'end_time': 12.0, 'emotion': '–≥—Ä—É—Å—Ç—å', 'confidence': 0.49},
        {'start_time': 12.0, 'end_time': 15.5, 'emotion': '—Ç—Ä–µ–≤–æ–≥–∞', 'confidence': 0.55},
        {'start_time': 15.5, 'end_time': 18.0, 'emotion': '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å', 'confidence': 0.67},
        {'start_time': 18.0, 'end_time': 21.0, 'emotion': '–≥—Ä—É—Å—Ç—å', 'confidence': 0.41}
    ]
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(mock_video_emotions)} –≤–∏–¥–µ–æ —ç–º–æ—Ü–∏–π, {len(mock_speech_emotions)} —Ä–µ—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    try:
        video_transitions = detector.detect_transitions(mock_video_emotions, 'video')
        speech_transitions = detector.detect_transitions(mock_speech_emotions, 'speech')
        
        print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: –≤–∏–¥–µ–æ ({len(video_transitions)}), —Ä–µ—á—å ({len(speech_transitions)})")
        
        # –ü–æ–¥—Å—á–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        critical_video = [t for t in video_transitions if t.is_critical]
        critical_speech = [t for t in speech_transitions if t.is_critical]
        
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: –≤–∏–¥–µ–æ ({len(critical_video)}), —Ä–µ—á—å ({len(critical_speech)})")
        
        # –†–∞—Å—á–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        metrics = metrics_calculator.calculate_comprehensive_metrics(video_transitions, speech_transitions)
        
        print(f"üìà –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: {len(metrics)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–µ—Ç—Ä–∏–∫
        required_sections = ['basic_metrics', 'psychological_indicators', 'correlation_metrics', 
                           'temporal_metrics', 'transition_matrices', 'instability_index', 'summary']
        
        for section in required_sections:
            if section in metrics:
                print(f"‚úÖ {section}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå {section}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        psych_indicators = metrics.get('psychological_indicators', {})
        combined = psych_indicators.get('combined', {})
        
        if combined:
            print(f"\nüß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
            print(f"  ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∂–∏: {combined.get('deception_likelihood', 0):.3f}")
            print(f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {combined.get('stress_level', 0):.3f}")
            print(f"  ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å: {combined.get('emotional_control', 0):.3f}")
            print(f"  ‚Ä¢ –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {combined.get('emotional_instability', 0):.3f}")
        
        # –ò–Ω–¥–µ–∫—Å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        instability = metrics.get('instability_index', {})
        if instability:
            combined_instability = instability.get('combined_instability', 0)
            interpretation = instability.get('interpretation', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
            print(f"\nüå°Ô∏è –ò–Ω–¥–µ–∫—Å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {combined_instability:.3f} ({interpretation})")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlations = metrics.get('correlation_metrics', {})
        if correlations:
            print(f"\nüîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
            print(f"  ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlations.get('temporal_correlation', 0):.3f}")
            print(f"  ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: {correlations.get('synchronized_transitions', 0)}")
            print(f"  ‚Ä¢ –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: {correlations.get('contradictory_transitions', 0)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º pipeline)
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            video_transitions_dict = []
            for t in video_transitions:
                video_transitions_dict.append({
                    'timestamp': float(t.timestamp),
                    'from_emotion': t.from_emotion,
                    'to_emotion': t.to_emotion,
                    'duration': float(t.duration),
                    'transition_type': t.transition_type,
                    'severity': int(t.severity),
                    'confidence_before': float(t.confidence_before),
                    'confidence_after': float(t.confidence_after),
                    'modality': t.modality,
                    'transition_speed': t.transition_speed,
                    'is_critical': bool(t.is_critical)
                })
            
            speech_transitions_dict = []
            for t in speech_transitions:
                speech_transitions_dict.append({
                    'timestamp': float(t.timestamp),
                    'from_emotion': t.from_emotion,
                    'to_emotion': t.to_emotion,
                    'duration': float(t.duration),
                    'transition_type': t.transition_type,
                    'severity': int(t.severity),
                    'confidence_before': float(t.confidence_before),
                    'confidence_after': float(t.confidence_after),
                    'modality': t.modality,
                    'transition_speed': t.transition_speed,
                    'is_critical': bool(t.is_critical)
                })
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≤ pipeline
            pipeline_result = {
                'video_transitions': video_transitions_dict,
                'speech_transitions': speech_transitions_dict,
                'transition_metrics': metrics,
                'critical_patterns': [t for t in video_transitions_dict + speech_transitions_dict if t['is_critical']],
                'summary': f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: –≤–∏–¥–µ–æ ({len(video_transitions_dict)}), —Ä–µ—á—å ({len(speech_transitions_dict)}). –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {len(critical_video + critical_speech)}",
                'total_transitions': len(video_transitions) + len(speech_transitions),
                'critical_count': len(critical_video) + len(critical_speech)
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                json.dump(pipeline_result, f, ensure_ascii=False, indent=2)
                temp_file = f.name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ —á–∏—Ç–∞–µ—Ç—Å—è
            with open(temp_file, 'r', encoding='utf-8') as f:
                loaded_data = json.load(f)
            
            print(f"‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {len(loaded_data)} —Ä–∞–∑–¥–µ–ª–æ–≤")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
        
        print(f"\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã –†–µ–∑—é–º–µ:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {len(video_transitions) + len(speech_transitions)}")
        print(f"  ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(critical_video) + len(critical_speech)}")
        print(f"  ‚Ä¢ –í–∏–¥–µ–æ –ø–µ—Ä–µ—Ö–æ–¥—ã: {len(video_transitions)}")
        print(f"  ‚Ä¢ –†–µ—á–µ–≤—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: {len(speech_transitions)}")
        print(f"  ‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {len(combined)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        print(f"  ‚Ä¢ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"  ‚Ä¢ –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ pipeline")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_config_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    test_config = {
        'min_transition_duration': 0.5,
        'confidence_threshold': 0.4,
        'min_confidence_diff': 0.15,
        'psychological_analysis': {
            'enable_deception_detection': True,
            'enable_stress_analysis': True,
            'enable_control_assessment': True,
            'enable_instability_tracking': True
        },
        'correlation': {
            'max_time_distance': 3.0,
            'enable_cross_modal': True
        }
    }
    
    try:
        detector = EmotionTransitionDetector(test_config)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        assert detector.min_duration == 0.5, f"min_duration: expected 0.5, got {detector.min_duration}"
        assert detector.confidence_threshold == 0.4, f"confidence_threshold: expected 0.4, got {detector.confidence_threshold}"
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —ç–º–æ—Ü–∏–π\n")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    success1 = test_transition_integration()
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    success2 = test_config_integration()
    
    print(f"\n{'='*60}")
    if success1 and success2:
        print("üéâ –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —ç–º–æ—Ü–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å pipeline –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ main.py!")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –¢–ï–°–¢–ê–•!")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")