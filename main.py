"""
–î–û–ü–†–û–° MVP 2.0 - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –¥–æ–ø—Ä–æ—Å–æ–≤ —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º —ç–º–æ—Ü–∏–π
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import time
import json
import io
import base64
from datetime import datetime, timedelta
from pathlib import Path
import yaml
import logging
import os
import tempfile
import shutil

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from core.pipeline import MasterPipeline
    from core.data_aggregator import DataAggregator  
    from core.report_generator import ComprehensiveReportGenerator
    from utils.translation import EmotionTranslator
    from utils.gpu_manager import get_gpu_manager
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    st.stop()

# ================================
# 1. –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ò –°–¢–ò–õ–ò–ó–ê–¶–ò–Ø
# ================================

st.set_page_config(
    page_title="–î–û–ü–†–û–° MVP 2.0",
    page_icon="üé•",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/your-repo',
        'Report a bug': "https://github.com/your-repo/issues",
        'About': "–î–û–ü–†–û–° MVP 2.0 - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –¥–æ–ø—Ä–æ—Å–æ–≤"
    }
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown('''
<style>
    .main {
        padding: 0rem 1rem;
    }
    
    .stProgress > div > div > div > div {
        background-color: #FF4444;
    }
    
    [data-testid="stSidebar"] {
        background-color: #f0f2f6;
    }
    
    .css-1d391kg {
        padding-top: 1rem;
    }
    
    .metric-container {
        background-color: #ffffff;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #FF4444;
        margin: 0.5rem 0;
    }
    
    .critical-moment {
        background-color: #ffcccc;
        padding: 10px;
        border-left: 3px solid red;
        margin: 5px 0;
        border-radius: 5px;
    }
    
    .normal-moment {
        background-color: #f0f2f6;
        padding: 10px;
        margin: 5px 0;
        border-radius: 5px;
    }
    
    .header-title {
        text-align: center;
        color: #FF4444;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 2rem;
    }
</style>
''', unsafe_allow_html=True)

# ================================
# 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò
# ================================

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = None
    if 'processing_complete' not in st.session_state:
        st.session_state.processing_complete = False
    if 'uploaded_video_path' not in st.session_state:
        st.session_state.uploaded_video_path = None
    if 'demo_mode' not in st.session_state:
        st.session_state.demo_mode = False
    if 'config' not in st.session_state:
        st.session_state.config = load_default_config()

def load_default_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        'processing': {
            'frame_skip': 15,
            'models': {
                'emotion': {
                    'use_deepface': True,
                    'use_fer': True,
                    'use_yolo': True,
                    'confidence_threshold': 0.5
                }
            },
            'audio': {
                'sample_rate': 16000,
                'vad_enabled': True
            },
            'video': {
                'extract_fps': 1,
                'max_resolution': 1080
            }
        },
        'analysis': {
            'time_resolution': 0.1,
            'emotion_change_threshold': 0.7,
            'mismatch_threshold': 0.5,
            'speech_pause_threshold': 2.0
        },
        'storage': {
            'frames_dir': 'storage/frames',
            'audio_dir': 'storage/audio',
            'faces_dir': 'storage/faces',
            'reports_dir': 'storage/reports',
            'analysis_dir': 'storage/analysis'
        },
        'openai': {
            'api_key': os.getenv('OPENAI_API_KEY', ''),
            'model': 'gpt-4',
            'max_tokens': 2000,
            'temperature': 0.3
        }
    }

# ================================
# 3. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ================================

def create_emotion_timeline(results_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã —ç–º–æ—Ü–∏–π"""
    video_emotions = results_data.get('data', {}).get('video_emotions', [])
    speech_emotions = results_data.get('data', {}).get('speech_emotions', [])
    
    if not video_emotions and not speech_emotions:
        fig = go.Figure()
        fig.add_annotation(text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                          xref="paper", yref="paper",
                          x=0.5, y=0.5, showarrow=False)
        return fig
    
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=('–≠–º–æ—Ü–∏–∏ –ª–∏—Ü–∞', '–≠–º–æ—Ü–∏–∏ —Ä–µ—á–∏'),
        vertical_spacing=0.1,
        shared_xaxes=True
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–π –ª–∏—Ü–∞
    if video_emotions:
        timestamps = [e.get('timestamp', 0) for e in video_emotions]
        confidences = [e.get('confidence', 0) for e in video_emotions]
        emotions = [e.get('emotion', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å') for e in video_emotions]
        
        fig.add_trace(
            go.Scatter(
                x=timestamps,
                y=confidences,
                mode='lines+markers',
                name='–≠–º–æ—Ü–∏–∏ –ª–∏—Ü–∞',
                line=dict(color='#FF4444', width=2),
                marker=dict(size=4),
                text=emotions,
                hovertemplate='<b>–í—Ä–µ–º—è:</b> %{x:.1f}—Å<br><b>–≠–º–æ—Ü–∏—è:</b> %{text}<br><b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> %{y:.2f}<extra></extra>'
            ),
            row=1, col=1
        )
    
    # –ì—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–π —Ä–µ—á–∏
    if speech_emotions:
        timestamps = [e.get('timestamp', 0) for e in speech_emotions]
        confidences = [e.get('confidence', 0) for e in speech_emotions]
        emotions = [e.get('emotion', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å') for e in speech_emotions]
        
        fig.add_trace(
            go.Scatter(
                x=timestamps,
                y=confidences,
                mode='lines+markers',
                name='–≠–º–æ—Ü–∏–∏ —Ä–µ—á–∏',
                line=dict(color='#4444FF', width=2),
                marker=dict(size=4),
                text=emotions,
                hovertemplate='<b>–í—Ä–µ–º—è:</b> %{x:.1f}—Å<br><b>–≠–º–æ—Ü–∏—è:</b> %{text}<br><b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> %{y:.2f}<extra></extra>'
            ),
            row=2, col=1
        )
    
    fig.update_layout(
        title="–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —ç–º–æ—Ü–∏–π",
        xaxis_title="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)",
        height=500,
        hovermode='x unified'
    )
    
    return fig

def create_emotion_heatmap(results_data, metrics):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã —ç–º–æ—Ü–∏–π"""
    video_emotions = results_data.get('data', {}).get('video_emotions', [])
    speech_emotions = results_data.get('data', {}).get('speech_emotions', [])
    
    if not video_emotions and not speech_emotions:
        fig = go.Figure()
        fig.add_annotation(text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã", 
                          xref="paper", yref="paper",
                          x=0.5, y=0.5, showarrow=False)
        return fig
    
    emotion_distribution = metrics.get('emotion_distribution', {})
    emotions = ['–∑–ª–æ—Å—Ç—å', '–≥—Ä—É—Å—Ç—å', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ', '—É–¥–∏–≤–ª–µ–Ω–∏–µ', '—Å—Ç—Ä–∞—Ö', '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ']
    
    # Create matrix: video emotions (row 0) and speech emotions (row 1)
    video_row = [emotion_distribution.get(emo, 0) for emo in emotions]
    speech_row = [0] * len(emotions)  # No speech data yet
    
    # Normalize to percentages
    total_frames = metrics.get('total_frames', 1)
    video_row = [x/total_frames * 100 for x in video_row]
    
    matrix = [video_row, speech_row]
    
    fig = go.Figure(data=go.Heatmap(
        z=matrix,
        x=[e.title() for e in emotions],
        y=['–õ–∏—Ü–æ', '–†–µ—á—å'],
        colorscale='RdYlBu_r',
        text=matrix,
        texttemplate="%{text:.1f}%",
        textfont={"size": 10},
        colorbar=dict(title="–ü—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏")
    ))
    
    fig.update_layout(
        title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —ç–º–æ—Ü–∏–π",
        xaxis_title="–¢–∏–ø —ç–º–æ—Ü–∏–∏",
        yaxis_title="–ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å",
        height=300
    )
    
    return fig

def create_speech_emotion_plot(speech_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —ç–º–æ—Ü–∏–π –≤ —Ä–µ—á–∏"""
    if not speech_data:
        fig = go.Figure()
        fig.add_annotation(text="–ù–µ—Ç —Ä–µ—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö", 
                          xref="paper", yref="paper",
                          x=0.5, y=0.5, showarrow=False)
        return fig
    
    fig = go.Figure()
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ—á–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    fig.add_trace(go.Scatter(
        x=speech_data.get('timestamps', []),
        y=speech_data.get('activity', []),
        mode='lines',
        name='–†–µ—á–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        line=dict(color='#00AA00', width=2),
        fill='tonexty'
    ))
    
    # –ì—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–π —Ä–µ—á–∏
    fig.add_trace(go.Scatter(
        x=speech_data.get('timestamps', []),
        y=speech_data.get('emotions', []),
        mode='lines+markers',
        name='–≠–º–æ—Ü–∏–∏ —Ä–µ—á–∏',
        line=dict(color='#FF8800', width=2),
        yaxis='y2'
    ))
    
    fig.update_layout(
        title="–ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏",
        xaxis_title="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)",
        yaxis=dict(title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", side="left"),
        yaxis2=dict(title="–≠–º–æ—Ü–∏—è", side="right", overlaying="y"),
        height=400
    )
    
    return fig

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ MM:SS"""
    return str(timedelta(seconds=int(seconds)))[2:]

def save_uploaded_file(uploaded_file):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = Path("temp_uploads")
        temp_dir.mkdir(exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_path = temp_dir / f"{timestamp}_{uploaded_file.name}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        return str(file_path)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

def get_demo_video_path():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –¥–µ–º–æ –≤–∏–¥–µ–æ"""
    demo_path = Path("demo/sample_interrogation.mp4")
    if demo_path.exists():
        return str(demo_path)
    else:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–µ–º–æ
        return "demo/sample_interrogation.mp4"

def generate_demo_results():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ
    timestamps = np.linspace(0, 120, 1200)  # 2 –º–∏–Ω—É—Ç—ã –≤–∏–¥–µ–æ
    
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–º–æ—Ü–∏–∏ –ª–∏—Ü–∞
    face_emotions = np.sin(timestamps * 0.1) * 0.5 + np.random.normal(0, 0.1, len(timestamps))
    
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ä–µ—á–∏
    speech_emotions = np.cos(timestamps * 0.08) * 0.3 + np.random.normal(0, 0.15, len(timestamps))
    
    # –†–µ—á–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    speech_activity = np.where(np.sin(timestamps * 0.2) > 0, 1, 0) + np.random.normal(0, 0.1, len(timestamps))
    
    return {
        'emotions': {
            'video_emotions': {
                'timestamps': timestamps.tolist(),
                'values': face_emotions.tolist()
            },
            'audio_emotions': {
                'timestamps': timestamps.tolist(),
                'values': speech_emotions.tolist()
            }
        },
        'speech': {
            'timestamps': timestamps.tolist(),
            'activity': np.clip(speech_activity, 0, 1).tolist(),
            'emotions': speech_emotions.tolist()
        },
        'critical_moments': [
            {
                'time': '00:15',
                'timestamp': 15,
                'type': '–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏',
                'description': '–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é',
                'severity': 7,
                'face_emotion': '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ',
                'speech_emotion': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å',
                'transcript': '–Ø —É–∂–µ –æ–±—ä—è—Å–Ω—è–ª —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑...',
                'frame': None
            },
            {
                'time': '00:45',
                'timestamp': 45,
                'type': '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π',
                'description': '–õ–∏—Ü–µ–≤—ã–µ —ç–º–æ—Ü–∏–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–Ω—É —Ä–µ—á–∏',
                'severity': 6,
                'face_emotion': '–ü–µ—á–∞–ª—å',
                'speech_emotion': '–†–∞–¥–æ—Å—Ç—å',
                'transcript': '–î–∞, –∫–æ–Ω–µ—á–Ω–æ, —è –±—ã–ª —Ç–∞–º.',
                'frame': None
            },
            {
                'time': '01:20',
                'timestamp': 80,
                'type': '–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞',
                'description': '–ù–µ–æ–±—ã—á–Ω–æ –¥–æ–ª–≥–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º',
                'severity': 5,
                'face_emotion': '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
                'speech_emotion': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å',
                'transcript': '[–ø–∞—É–∑–∞ 4.2 —Å–µ–∫] –ù—É... —ç—Ç–æ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å.',
                'frame': None
            }
        ],
        'transcript_segments': [
            {
                'speaker': '–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                'text': '–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å 15 —á–∏—Å–ª–∞ –≤–µ—á–µ—Ä–æ–º?',
                'time': '00:05',
                'critical': False
            },
            {
                'speaker': '–°–≤–∏–¥–µ—Ç–µ–ª—å',
                'text': '–Ø —É–∂–µ –æ–±—ä—è—Å–Ω—è–ª —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑...',
                'time': '00:15',
                'critical': True
            },
            {
                'speaker': '–°–≤–∏–¥–µ—Ç–µ–ª—å',
                'text': '–î–∞, –∫–æ–Ω–µ—á–Ω–æ, —è –±—ã–ª —Ç–∞–º.',
                'time': '00:45',
                'critical': True
            }
        ],
        'dominant_emotion': '–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ',
        'emotion_changes': 23,
        'stress_level': 0.68,
        'stability': 0.42,
        'processing_time': 45.2,
        'gpt_insights': """
        **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–ø—Ä–æ—Å–∞:**
        
        1. **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å**: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (42% —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏), —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å.
        
        2. **–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞**: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —Å—Ç—Ä–µ—Å—Å-—É—Ä–æ–≤–µ–Ω—å 68%, —á—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –Ω–æ—Ä–º—ã –¥–ª—è –æ–±—ã—á–Ω–æ–π –±–µ—Å–µ–¥—ã.
        
        3. **–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—è–º–∏**: –í—ã—è–≤–ª–µ–Ω—ã –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ —ç–º–æ—Ü–∏–∏ –ª–∏—Ü–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç–º–æ—Ü–∏—è–º –≤ —Ä–µ—á–∏, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
        
        4. **–ó–∞—â–∏—Ç–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏**: –§—Ä–∞–∑—ã —Ç–∏–ø–∞ "—è —É–∂–µ –æ–±—ä—è—Å–Ω—è–ª" –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∂–µ–ª–∞–Ω–∏–µ –∏–∑–±–µ–∂–∞—Ç—å —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–µ–º—ã.
        
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–æ–ø—Ä–æ—Å–∞:**
        - –û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–æ–º–µ–Ω—Ç—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —ç–º–æ—Ü–∏–π
        - –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ –º–æ–º–µ–Ω—Ç—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞  
        - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –ø–æ —ç–ø–∏–∑–æ–¥–∞–º —Å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        """,
        'emotion_matrix': [[0.3, -0.2, 0.1, 0.2, 0.1], [-0.1, 0.2, 0.3, -0.2, 0.0]],
        'audio_path': 'demo/sample_audio.wav',
        'speech_segments': pd.DataFrame({
            '–í—Ä–µ–º—è': ['00:05', '00:15', '00:25', '00:45', '01:20'],
            '–ì–æ–≤–æ—Ä—è—â–∏–π': ['–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–°–≤–∏–¥–µ—Ç–µ–ª—å', '–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–°–≤–∏–¥–µ—Ç–µ–ª—å', '–°–≤–∏–¥–µ—Ç–µ–ª—å'],
            '–≠–º–æ—Ü–∏—è': ['–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å', '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', '–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', '–†–∞–¥–æ—Å—Ç—å', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å'],
            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': [0.85, 0.92, 0.78, 0.65, 0.43]
        })
    }

# ================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ================================

init_session_state()

# ================================
# –ó–ê–ì–û–õ–û–í–û–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ================================

st.markdown('<h1 class="header-title">üé• –î–û–ü–†–û–° MVP 2.0</h1>', unsafe_allow_html=True)
st.markdown("""
<div style="text-align: center; margin-bottom: 2rem;">
    <p style="font-size: 1.2rem; color: #666;">
        –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ –¥–æ–ø—Ä–æ—Å–æ–≤ —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —ç–º–æ—Ü–∏–π
    </p>
</div>
""", unsafe_allow_html=True)

# ================================
# 4. –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò
# ================================

with st.sidebar:
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"):
        try:
            gpu_manager = get_gpu_manager()
            device_info = gpu_manager.get_device_info()
            
            st.write("**–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:**", device_info.get('current_device', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'))
            st.write("**CUDA –¥–æ—Å—Ç—É–ø–Ω–∞:**", "‚úÖ" if device_info.get('cuda_available', False) else "‚ùå")
            st.write("**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:**", len(device_info.get('available_devices', [])))
            
            if device_info.get('nvidia_gpus'):
                for gpu in device_info['nvidia_gpus'][:1]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é GPU
                    memory_gb = gpu['memory_total'] / (1024**3)
                    st.write(f"**GPU:** {gpu['name']}")
                    st.write(f"**–ü–∞–º—è—Ç—å:** {memory_gb:.1f} GB")
                    
        except Exception as e:
            st.write("**–°—Ç–∞—Ç—É—Å:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    st.divider()
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
    st.subheader("ü§ñ –ú–æ–¥–µ–ª–∏")
    use_deepface = st.checkbox("DeepFace", value=True, help="–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –ª–∏—Ü–∞")
    use_fer = st.checkbox("FER", value=True, help="–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π")
    use_yolo_emotion = st.checkbox("YOLO —ç–º–æ—Ü–∏–∏", value=True, help="YOLO –¥–ª—è —ç–º–æ—Ü–∏–π –∏ –ª–∏—Ü")
    use_speech_analysis = st.checkbox("–ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏", value=True, help="–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ —Ä–µ—á–∏")
    
    st.divider()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    st.subheader("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    frame_skip = st.slider(
        "–ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤", 
        min_value=1, max_value=30, value=15,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö –∫–∞–¥—Ä–æ–≤ (–±–æ–ª—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞)"
    )
    
    confidence_threshold = st.slider(
        "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 
        min_value=0.1, max_value=1.0, value=0.5, step=0.1,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"
    )
    
    time_resolution = st.slider(
        "–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (—Å–µ–∫)", 
        min_value=0.1, max_value=2.0, value=0.1, step=0.1,
        help="–í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
    )
    
    st.divider()
    
    # GPU –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader("üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
    device_option = st.radio(
        "–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
        ["–ê–≤—Ç–æ", "GPU", "CPU"],
        index=0,
        help="–ê–≤—Ç–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    )
    
    force_cpu = st.checkbox("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU", value=False)
    
    st.divider()
    
    # –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader("üìÅ –≠–∫—Å–ø–æ—Ä—Ç")
    export_formats = st.multiselect(
        "–§–æ—Ä–º–∞—Ç—ã –æ—Ç—á–µ—Ç–æ–≤",
        ["CSV", "JSON", "HTML", "PDF", "Excel"],
        default=["CSV", "HTML"],
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    )
    
    include_charts = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", value=True)
    include_raw_data = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ", value=False)
    
    st.divider()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"):
        st.subheader("–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π")
        emotion_change_threshold = st.slider("–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π", 0.1, 2.0, 0.7)
        mismatch_threshold = st.slider("–ü–æ—Ä–æ–≥ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π", 0.1, 1.0, 0.5)
        speech_pause_threshold = st.slider("–ü–æ—Ä–æ–≥ –ø–∞—É–∑ –≤ —Ä–µ—á–∏ (—Å–µ–∫)", 1.0, 10.0, 2.0)
        
        st.subheader("OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        use_gpt_analysis = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT –∞–Ω–∞–ª–∏–∑", value=True)
        openai_model = st.selectbox("–ú–æ–¥–µ–ª—å GPT", ["gpt-4", "gpt-3.5-turbo"], index=0)
        
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    st.session_state.config.update({
        'processing': {
            'frame_skip': frame_skip,
            'models': {
                'emotion': {
                    'use_deepface': use_deepface,
                    'use_fer': use_fer,
                    'use_yolo': use_yolo_emotion,
                    'use_speech_analysis': use_speech_analysis,
                    'confidence_threshold': confidence_threshold
                }
            },
            'device': {
                'option': device_option.lower(),
                'force_cpu': force_cpu
            }
        },
        'analysis': {
            'time_resolution': time_resolution,
            'emotion_change_threshold': emotion_change_threshold,
            'mismatch_threshold': mismatch_threshold,
            'speech_pause_threshold': speech_pause_threshold
        },
        'export': {
            'formats': export_formats,
            'include_charts': include_charts,
            'include_raw_data': include_raw_data
        },
        'openai': {
            'enabled': use_gpt_analysis,
            'model': openai_model
        }
    })

# ================================
# 5. –û–°–ù–û–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ –° –¢–ê–ë–ê–ú–ò
# ================================

tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìπ –ó–∞–≥—Ä—É–∑–∫–∞", 
    "üìä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π", 
    "üéôÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏",
    "üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è", 
    "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã",
    "üìà –û—Ç—á–µ—Ç—ã"
])

# ================================
# TAB 1: –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û
# ================================

with tab1:
    st.header("üìπ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏–¥–µ–æ")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª",
            type=['mp4', 'avi', 'mov', 'mkv', 'webm'],
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2GB. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV, WebM"
        )
        
        if uploaded_file is not None:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_details = {
                "–ò–º—è —Ñ–∞–π–ª–∞": uploaded_file.name,
                "–†–∞–∑–º–µ—Ä": f"{uploaded_file.size / (1024*1024):.1f} MB",
                "–¢–∏–ø": uploaded_file.type
            }
            
            st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
            for key, value in file_details.items():
                st.write(f"**{key}:** {value}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            if st.session_state.uploaded_video_path is None:
                with st.spinner("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞..."):
                    video_path = save_uploaded_file(uploaded_file)
                    if video_path:
                        st.session_state.uploaded_video_path = video_path
                        st.success("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä
            try:
                st.video(uploaded_file)
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–∏–¥–µ–æ: {e}")
    
    with col2:
        st.subheader("üé¨ –î–µ–º–æ —Ä–µ–∂–∏–º")
        st.write("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º –≤–∏–¥–µ–æ")
        
        if st.button("üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ", type="primary", use_container_width=True):
            st.session_state.demo_mode = True
            st.session_state.uploaded_video_path = get_demo_video_path()
            st.success("‚úÖ –î–µ–º–æ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            st.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
        
        if st.session_state.demo_mode:
            st.write("**–î–µ–º–æ –≤–∏–¥–µ–æ:** 2 –º–∏–Ω—É—Ç—ã –¥–æ–ø—Ä–æ—Å–∞")
            st.write("**–°—Ü–µ–Ω–∞—Ä–∏–π:** –û–ø—Ä–æ—Å —Å–≤–∏–¥–µ—Ç–µ–ª—è")
            st.write("**–Ø–∑—ã–∫–∏:** –†—É—Å—Å–∫–∏–π")
    
    # –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É
    st.divider()
    
    ready_for_analysis = (
        st.session_state.uploaded_video_path is not None or 
        st.session_state.demo_mode
    )
    
    if ready_for_analysis:
        st.success("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É!")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        st.subheader("üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            enabled_models = []
            if use_deepface: enabled_models.append("DeepFace")
            if use_fer: enabled_models.append("FER")
            if use_yolo_emotion: enabled_models.append("YOLO")
            if use_speech_analysis: enabled_models.append("Speech")
            
            st.write("**–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏:**")
            for model in enabled_models:
                st.write(f"‚Ä¢ {model}")
        
        with col2:
            st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
            st.write(f"‚Ä¢ –ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤: {frame_skip}")
            st.write(f"‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_threshold}")
            st.write(f"‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_option}")
        
        with col3:
            estimated_time = len(enabled_models) * 15 + (30 if device_option == "CPU" else 10)
            st.write("**–û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è:**")
            st.write(f"‚Ä¢ ~{estimated_time} —Å–µ–∫—É–Ω–¥")
            st.write(f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç: {', '.join(export_formats)}")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        st.divider()
        
        if st.button(
            "üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó", 
            type="primary",
            use_container_width=True,
            disabled=st.session_state.processing_complete
        ):
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Ü–µ—Å—Å—É –∞–Ω–∞–ª–∏–∑–∞ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ)
            st.session_state.start_analysis = True
            st.rerun()
    
    else:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ —Ä–µ–∂–∏–º –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

# ================================
# –ü–†–û–¶–ï–°–° –ê–ù–ê–õ–ò–ó–ê
# ================================

if hasattr(st.session_state, 'start_analysis') and st.session_state.start_analysis:
    st.session_state.start_analysis = False
    
    with st.container():
        st.header("‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_container = st.container()
        status_container = st.container()
        log_container = st.container()
        
        with progress_container:
            st.write("**–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞...**")
            progress_bar = st.progress(0)
            status_text = st.empty()
            
        # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞)
        if st.session_state.demo_mode:
            # –î–µ–º–æ —Ä–µ–∂–∏–º - –±—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
            stages = [
                ("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ", 0.1),
                ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤", 0.2), 
                ("–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –ª–∏—Ü–∞", 0.4),
                ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ", 0.5),
                ("–ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏", 0.7),
                ("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", 0.8),
                ("–ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤", 0.9),
                ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞", 1.0)
            ]
            
            for stage_name, progress in stages:
                progress_bar.progress(progress)
                status_text.text(f"üîÑ {stage_name}...")
                
                with log_container:
                    st.info(f"üìç {stage_name}")
                
                time.sleep(1)  # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.session_state.analysis_results = generate_demo_results()
            st.session_state.processing_complete = True
            
            status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            st.success("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –¥—Ä—É–≥–∏–º –≤–∫–ª–∞–¥–∫–∞–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            
        else:
            # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            try:
                status_text.text("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞...")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω
                pipeline = MasterPipeline(st.session_state.config)
                
                def progress_callback(progress, stage, details):
                    """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
                    progress_bar.progress(progress)
                    status_text.text(f"üîÑ {stage}: {details}")
                
                status_text.text("üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                results = pipeline.process_video(
                    st.session_state.uploaded_video_path,
                    progress_callback=progress_callback
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.session_state.analysis_results = results
                st.session_state.processing_complete = True
                
                progress_bar.progress(1.0)
                status_text.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                st.success("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
                st.exception(e)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                progress_bar.progress(0)
                status_text.text("‚ùå –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
                
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                st.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                st.session_state.analysis_results = generate_demo_results()
                st.session_state.processing_complete = True

# ================================
# TAB 2: –ê–ù–ê–õ–ò–ó –≠–ú–û–¶–ò–ô  
# ================================

def calculate_emotion_metrics(results):
    """Calculate emotion metrics from pipeline results"""
    video_emotions = results.get('data', {}).get('video_emotions', [])
    
    if not video_emotions:
        return {
            'dominant_emotion': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
            'emotion_changes': 0,
            'stress_level': 0.0,
            'stability': 0.0,
            'emotion_distribution': {}
        }
    
    # Count emotions
    emotion_counts = {}
    prev_emotion = None
    transitions = 0
    
    for emotion_data in video_emotions:
        emotion = emotion_data.get('emotion', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å')
        emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
        
        if prev_emotion and prev_emotion != emotion:
            transitions += 1
        prev_emotion = emotion
    
    # Calculate dominant emotion
    dominant_emotion = max(emotion_counts.keys(), key=emotion_counts.get) if emotion_counts else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
    
    # Calculate stability (higher = more stable)
    total_frames = len(video_emotions)
    dominant_count = emotion_counts.get(dominant_emotion, 0)
    stability = dominant_count / total_frames if total_frames > 0 else 0
    
    # Calculate stress level based on negative emotions
    negative_emotions = ['–∑–ª–æ—Å—Ç—å', '—Å—Ç—Ä–∞—Ö', '–≥—Ä—É—Å—Ç—å', '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ']
    negative_count = sum(emotion_counts.get(emo, 0) for emo in negative_emotions)
    stress_level = negative_count / total_frames if total_frames > 0 else 0
    
    return {
        'dominant_emotion': dominant_emotion,
        'emotion_changes': transitions,
        'stress_level': stress_level,
        'stability': stability,
        'emotion_distribution': emotion_counts,
        'total_frames': total_frames
    }

with tab2:
    st.header("üìä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π")
    
    if not st.session_state.processing_complete:
        st.info("‚ÑπÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ó–∞–≥—Ä—É–∑–∫–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    else:
        results = st.session_state.analysis_results
        
        # Calculate metrics from real data
        metrics = calculate_emotion_metrics(results)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="metric-container">
                <h3>üé≠ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è</h3>
                <h2>{metrics['dominant_emotion']}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-container">
                <h3>üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π</h3>
                <h2>{metrics['emotion_changes']}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            stress_level = metrics['stress_level']
            color = '#FF4444' if stress_level > 0.7 else '#FFA500' if stress_level > 0.4 else '#00AA00'
            st.markdown(f"""
            <div class="metric-container">
                <h3>‚ö° –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞</h3>
                <h2 style="color: {color}">{stress_level:.1%}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            stability = metrics['stability']
            st.markdown(f"""
            <div class="metric-container">
                <h3>‚öñÔ∏è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</h3>
                <h2>{stability:.1%}</h2>
            </div>
            """, unsafe_allow_html=True)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —ç–º–æ—Ü–∏–π
        st.subheader("üìà –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —ç–º–æ—Ü–∏–π")
        
        fig = create_emotion_timeline(results)
        st.plotly_chart(fig, use_container_width=True)
        
        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —ç–º–æ—Ü–∏–π
        st.subheader("üó∫Ô∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —ç–º–æ—Ü–∏–π")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            heatmap_fig = create_emotion_heatmap(results, metrics)
            st.plotly_chart(heatmap_fig, use_container_width=True)
        
        with col2:
            st.write("**–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã:**")
            st.write("‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç - –≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏")
            st.write("‚Ä¢ –°–∏–Ω–∏–π —Ü–≤–µ—Ç - –Ω–∏–∑–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å")
            st.write("‚Ä¢ –†–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –ª–∏—Ü–æ–º –∏ —Ä–µ—á—å—é –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")

# ================================
# TAB 3: –ê–ù–ê–õ–ò–ó –†–ï–ß–ò
# ================================

with tab3:
    st.header("üéôÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏ –∏ –∑–≤—É–∫–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    
    if not st.session_state.processing_complete:
        st.info("‚ÑπÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    else:
        results = st.session_state.analysis_results
        
        # –ì—Ä–∞—Ñ–∏–∫ —ç–º–æ—Ü–∏–π –≤ —Ä–µ—á–∏
        st.subheader("üìà –≠–º–æ—Ü–∏–∏ –≤ —Ä–µ—á–∏")
        
        speech_fig = create_speech_emotion_plot(results.get('speech', {}))
        st.plotly_chart(speech_fig, use_container_width=True)
        
        # –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä
        st.subheader("üéµ –ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å")
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
            st.write("**–ê—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∞:**")
            st.write("‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2:00")
            st.write("‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 16 kHz")
            st.write("‚Ä¢ –ö–∞–Ω–∞–ª—ã: –ú–æ–Ω–æ")
            
            # Placeholder –¥–ª—è –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä–∞
            st.info("üéµ –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä –±—É–¥–µ—Ç –∑–¥–µ—Å—å –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
        
        with col2:
            st.write("**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–µ—á–∏:**")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–µ—á–∏
            speech_metrics = {
                "–°—Ä–µ–¥–Ω—è—è –≥—Ä–æ–º–∫–æ—Å—Ç—å": "65 dB",
                "–¢–µ–º–ø —Ä–µ—á–∏": "140 —Å–ª–æ–≤/–º–∏–Ω", 
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—É–∑": "12",
                "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–∞—É–∑": "1.8 —Å–µ–∫",
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞": "–£–º–µ—Ä–µ–Ω–Ω–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è"
            }
            
            for metric, value in speech_metrics.items():
                st.write(f"‚Ä¢ **{metric}:** {value}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        st.subheader("üìä –°–µ–≥–º–µ–Ω—Ç—ã —Ä–µ—á–∏")
        
        if 'speech_segments' in results:
            st.dataframe(
                results['speech_segments'],
                use_container_width=True,
                height=300
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–≤–æ—Ä—è—â–∏–º
        st.subheader("üë• –ê–Ω–∞–ª–∏–∑ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å:**")
            st.write("‚Ä¢ –í—Ä–µ–º—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è: 45 —Å–µ–∫ (37%)")
            st.write("‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç–º–æ—Ü–∏—è: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å")
            st.write("‚Ä¢ –¢–µ–º–ø —Ä–µ—á–∏: 120 —Å–ª–æ–≤/–º–∏–Ω")
            st.write("‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 8")
        
        with col2:
            st.write("**–î–æ–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π:**")
            st.write("‚Ä¢ –í—Ä–µ–º—è –≥–æ–≤–æ—Ä–µ–Ω–∏—è: 75 —Å–µ–∫ (63%)")
            st.write("‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç–º–æ—Ü–∏—è: –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ")
            st.write("‚Ä¢ –¢–µ–º–ø —Ä–µ—á–∏: 160 —Å–ª–æ–≤/–º–∏–Ω")
            st.write("‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—É–∑: 9")

# ================================
# TAB 4: –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø
# ================================

with tab4:
    st.header("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
    
    if not st.session_state.processing_complete:
        st.info("‚ÑπÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        results = st.session_state.analysis_results
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col1, col2, col3 = st.columns(3)
        
        with col1:
            version = st.radio(
                "–í–µ—Ä—Å–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞",
                ["–û—Ä–∏–≥–∏–Ω–∞–ª", "–£–ª—É—á—à–µ–Ω–Ω–∞—è", "–° —Ä–∞–∑–º–µ—Ç–∫–æ–π"],
                index=2
            )
        
        with col2:
            show_timestamps = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", value=True)
            show_confidence = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", value=False)
        
        with col3:
            highlight_critical = st.checkbox("–í—ã–¥–µ–ª–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã", value=True)
            show_emotions = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —ç–º–æ—Ü–∏–∏", value=True)
        
        st.divider()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        st.subheader("üìú –¢–µ–∫—Å—Ç –¥–æ–ø—Ä–æ—Å–∞")
        
        if 'transcript_segments' in results:
            for i, segment in enumerate(results['transcript_segments']):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                is_critical = segment.get('critical', False) and highlight_critical
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–≥–º–µ–Ω—Ç–∞
                speaker = segment.get('speaker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                text = segment.get('text', '')
                time_info = segment.get('time', '00:00')
                
                # HTML —Ä–∞–∑–º–µ—Ç–∫–∞
                if is_critical:
                    st.markdown(f"""
                    <div class="critical-moment">
                        <b>üî¥ {speaker}</b> 
                        {f'<small>({time_info})</small>' if show_timestamps else ''}
                        <br>
                        {text}
                        {f'<br><small>‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç</small>' if highlight_critical else ''}
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div class="normal-moment">
                        <b>{speaker}</b> 
                        {f'<small>({time_info})</small>' if show_timestamps else ''}
                        <br>
                        {text}
                    </div>
                    """, unsafe_allow_html=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", "324")
        
        with col2:
            st.metric("–°–ª–æ–≤–∞ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è", "142")
        
        with col3:
            st.metric("–°–ª–æ–≤–∞ –¥–æ–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ", "182")
        
        with col4:
            st.metric("–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", "94%")
        
        # –û–±–ª–∞–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (placeholder)
        st.subheader("‚òÅÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
        st.info("üìù –û–±–ª–∞–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –∑–¥–µ—Å—å –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            transcript_text = "\n".join([f"{seg['speaker']}: {seg['text']}" for seg in results.get('transcript_segments', [])])
            st.download_button(
                "üìÑ –°–∫–∞—á–∞—Ç—å TXT",
                transcript_text,
                "transcript.txt",
                "text/plain"
            )
        
        with col2:
            # –§–æ—Ä–º–∞—Ç SRT –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            srt_content = ""
            for i, seg in enumerate(results.get('transcript_segments', []), 1):
                srt_content += f"{i}\n00:{seg['time']} --> 00:00:00\n{seg['speaker']}: {seg['text']}\n\n"
            
            st.download_button(
                "üé¨ –°–∫–∞—á–∞—Ç—å SRT",
                srt_content,
                "subtitles.srt",
                "text/plain"
            )
        
        with col3:
            # JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            json_data = json.dumps(results.get('transcript_segments', []), ensure_ascii=False, indent=2)
            st.download_button(
                "üìã –°–∫–∞—á–∞—Ç—å JSON",
                json_data,
                "transcript.json",
                "application/json"
            )

# ================================
# TAB 5: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–û–ú–ï–ù–¢–´
# ================================

with tab5:
    st.header("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –¥–æ–ø—Ä–æ—Å–∞")
    
    if not st.session_state.processing_complete:
        st.info("‚ÑπÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞")
    else:
        results = st.session_state.analysis_results
        critical_moments = results.get('critical_moments', [])
        
        if not critical_moments:
            st.success("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ –º–æ–º–µ–Ω—Ç–æ–≤", len(critical_moments))
            
            with col2:
                high_severity = len([cm for cm in critical_moments if cm.get('severity', 0) >= 7])
                st.metric("–í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å", high_severity)
            
            with col3:
                avg_severity = np.mean([cm.get('severity', 0) for cm in critical_moments])
                st.metric("–°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å", f"{avg_severity:.1f}/10")
            
            with col4:
                unique_types = len(set(cm.get('type', '') for cm in critical_moments))
                st.metric("–¢–∏–ø–æ–≤ –∞–Ω–æ–º–∞–ª–∏–π", unique_types)
            
            st.divider()
            
            # –§–∏–ª—å—Ç—Ä—ã
            st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
            
            col1, col2 = st.columns(2)
            
            with col1:
                severity_filter = st.slider(
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å",
                    min_value=1, max_value=10, value=1
                )
            
            with col2:
                type_filter = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É",
                    ["–í—Å–µ —Ç–∏–ø—ã"] + list(set(cm.get('type', '') for cm in critical_moments))
                )
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–º–µ–Ω—Ç–æ–≤
            filtered_moments = critical_moments
            
            if severity_filter > 1:
                filtered_moments = [cm for cm in filtered_moments if cm.get('severity', 0) >= severity_filter]
            
            if type_filter != "–í—Å–µ —Ç–∏–ø—ã":
                filtered_moments = [cm for cm in filtered_moments if cm.get('type', '') == type_filter]
            
            st.write(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(filtered_moments)} –∏–∑ {len(critical_moments)} –º–æ–º–µ–Ω—Ç–æ–≤")
            
            st.divider()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤
            st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            
            for idx, moment in enumerate(filtered_moments):
                severity = moment.get('severity', 0)
                severity_color = '#FF4444' if severity >= 7 else '#FFA500' if severity >= 5 else '#FFD700'
                severity_text = '–í–´–°–û–ö–ê–Ø' if severity >= 7 else '–°–†–ï–î–ù–Ø–Ø' if severity >= 5 else '–ù–ò–ó–ö–ê–Ø'
                
                with st.expander(
                    f"üî¥ –ú–æ–º–µ–Ω—Ç {idx+1}: {moment.get('time', '00:00')} - {moment.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} "
                    f"[{severity_text}]",
                    expanded=severity >= 7
                ):
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        st.write("**–û–ø–∏—Å–∞–Ω–∏–µ:**")
                        st.write(moment.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'))
                        
                        st.write("**–ö–æ–Ω—Ç–µ–∫—Å—Ç:**")
                        context_info = [
                            f"‚Ä¢ **–≠–º–æ—Ü–∏—è –ª–∏—Ü–∞:** {moment.get('face_emotion', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}",
                            f"‚Ä¢ **–≠–º–æ—Ü–∏—è —Ä–µ—á–∏:** {moment.get('speech_emotion', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}",
                            f"‚Ä¢ **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:** \"{moment.get('transcript', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}\""
                        ]
                        
                        for info in context_info:
                            st.markdown(info)
                    
                    with col2:
                        st.markdown(f"""
                        <div style="padding: 1rem; background-color: {severity_color}20; border-radius: 0.5rem; border-left: 4px solid {severity_color};">
                            <h4 style="margin: 0; color: {severity_color};">–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏</h4>
                            <h2 style="margin: 0; color: {severity_color};">{severity}/10</h2>
                            <p style="margin: 0; font-size: 0.8rem;">{severity_text}</p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        st.write("**–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:**")
                        st.write(f"‚Ä¢ –í—Ä–µ–º—è: {moment.get('time', '00:00')}")
                        st.write(f"‚Ä¢ –°–µ–∫—É–Ω–¥—ã: {moment.get('timestamp', 0)}")
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–¥—Ä, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if moment.get('frame'):
                        st.image(moment['frame'], caption=f"–ö–∞–¥—Ä –≤ –º–æ–º–µ–Ω—Ç {moment.get('time', '00:00')}")
                    else:
                        st.info("üì∑ –ö–∞–¥—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞")
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    st.write("**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                    if moment.get('type') == '–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏':
                        st.write("‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã–∑–≤–∞–ª–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é")
                        st.write("‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–∞–Ω–Ω–æ–º –º–æ–º–µ–Ω—Ç–µ")
                    elif moment.get('type') == '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π':
                        st.write("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                        st.write("‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —á–µ—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
                    elif moment.get('type') == '–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞':
                        st.write("‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ")
                        st.write("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º—è –¥–ª—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            
            # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤
            if filtered_moments:
                st.subheader("üìà –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                
                timestamps = [cm.get('timestamp', 0) for cm in filtered_moments]
                severities = [cm.get('severity', 0) for cm in filtered_moments]
                types = [cm.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') for cm in filtered_moments]
                
                fig = go.Figure()
                
                # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
                type_colors = {
                    '–†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏': '#FF4444',
                    '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π': '#FFA500', 
                    '–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞': '#4444FF'
                }
                
                for i, (ts, sev, typ) in enumerate(zip(timestamps, severities, types)):
                    fig.add_trace(go.Scatter(
                        x=[ts],
                        y=[sev],
                        mode='markers',
                        marker=dict(
                            size=max(8, sev * 2),
                            color=type_colors.get(typ, '#888888'),
                            line=dict(width=2, color='white')
                        ),
                        name=typ,
                        hovertemplate=f'<b>–í—Ä–µ–º—è:</b> {format_time(ts)}<br><b>–í–∞–∂–Ω–æ—Å—Ç—å:</b> {sev}/10<br><b>–¢–∏–ø:</b> {typ}<extra></extra>',
                        showlegend=i == 0 or typ not in [types[j] for j in range(i)]
                    ))
                
                fig.update_layout(
                    title="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ",
                    xaxis_title="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)",
                    yaxis_title="–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏",
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)

# ================================
# TAB 6: –û–¢–ß–ï–¢–´
# ================================

with tab6:
    st.header("üìà –û—Ç—á–µ—Ç—ã –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    
    if not st.session_state.processing_complete:
        st.info("‚ÑπÔ∏è –û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞")
    else:
        results = st.session_state.analysis_results
        
        # GPT –ê–Ω–∞–ª–∏–∑ –∏ –∏–Ω—Å–∞–π—Ç—ã
        st.subheader("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
        
        with st.container():
            if 'gpt_insights' in results:
                insights = results['gpt_insights']
                st.markdown(insights)
            else:
                st.info("ü§ñ GPT –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        st.divider()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
            emotional_stats = {
                "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è": results.get('dominant_emotion', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'),
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤": results.get('emotion_changes', 0),
                "–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞": f"{results.get('stress_level', 0):.1%}",
                "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å": f"{results.get('stability', 0):.1%}",
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤": len(results.get('critical_moments', []))
            }
            
            for stat, value in emotional_stats.items():
                st.write(f"‚Ä¢ **{stat}:** {value}")
        
        with col2:
            st.write("**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
            tech_stats = {
                "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏": f"{results.get('processing_time', 0):.1f} —Å–µ–∫",
                "–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ": "HD (1080p)", 
                "–ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ": "16 kHz",
                "–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è": "94%",
                "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞": "87%"
            }
            
            for stat, value in tech_stats.items():
                st.write(f"‚Ä¢ **{stat}:** {value}")
        
        st.divider()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
        st.subheader("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã")
        
        col1, col2, col3 = st.columns(3)
        
        # CSV –æ—Ç—á–µ—Ç
        with col1:
            if st.button("üìä –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CSV", use_container_width=True):
                with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö..."):
                    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    data_rows = []
                    
                    if 'emotions' in results and 'video_emotions' in results['emotions']:
                        video_data = results['emotions']['video_emotions']
                        timestamps = video_data.get('timestamps', [])
                        values = video_data.get('values', [])
                        
                        for ts, val in zip(timestamps, values):
                            data_rows.append({
                                '–í—Ä–µ–º—è': ts,
                                '–í—Ä–µ–º—è_—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ': format_time(ts),
                                '–≠–º–æ—Ü–∏—è_–ª–∏—Ü–∞': val,
                                '–≠–º–æ—Ü–∏—è_—Ä–µ—á–∏': 0.0,  # Placeholder
                                '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π_–º–æ–º–µ–Ω—Ç': any(
                                    abs(cm.get('timestamp', 0) - ts) < 1.0 
                                    for cm in results.get('critical_moments', [])
                                )
                            })
                    
                    if data_rows:
                        df = pd.DataFrame(data_rows)
                        csv_data = df.to_csv(index=False, encoding='utf-8')
                        
                        st.download_button(
                            label="üìÑ –°–∫–∞—á–∞—Ç—å CSV –¥–∞–Ω–Ω—ã–µ",
                            data=csv_data,
                            file_name=f"analysis_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        # HTML –æ—Ç—á–µ—Ç  
        with col2:
            if st.button("üåê –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML", use_container_width=True):
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞..."):
                    html_content = f"""
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <meta charset="utf-8">
                        <title>–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–ø—Ä–æ—Å–∞</title>
                        <style>
                            body {{ font-family: Arial, sans-serif; margin: 40px; }}
                            h1, h2 {{ color: #FF4444; }}
                            .metric {{ background: #f0f2f6; padding: 10px; margin: 5px 0; border-radius: 5px; }}
                            .critical {{ background: #ffcccc; padding: 10px; border-left: 3px solid red; }}
                        </style>
                    </head>
                    <body>
                        <h1>üé• –î–û–ü–†–û–° MVP 2.0 - –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞</h1>
                        <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                        
                        <h2>üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h2>
                        <div class="metric">–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {results.get('dominant_emotion', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}</div>
                        <div class="metric">–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {results.get('stress_level', 0):.1%}</div>
                        <div class="metric">–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {results.get('stability', 0):.1%}</div>
                        <div class="metric">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {len(results.get('critical_moments', []))}</div>
                        
                        <h2>‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã</h2>
                    """
                    
                    for cm in results.get('critical_moments', []):
                        html_content += f"""
                        <div class="critical">
                            <strong>{cm.get('time', '00:00')} - {cm.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</strong><br>
                            {cm.get('description', '')}<br>
                            <em>–í–∞–∂–Ω–æ—Å—Ç—å: {cm.get('severity', 0)}/10</em>
                        </div>
                        """
                    
                    html_content += """
                        <h2>üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</h2>
                        <div style="background: #f8f9fa; padding: 20px; border-radius: 5px;">
                    """ + results.get('gpt_insights', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω').replace('\n', '<br>') + """
                        </div>
                    </body>
                    </html>
                    """
                    
                    st.download_button(
                        label="üåê –°–∫–∞—á–∞—Ç—å HTML –æ—Ç—á–µ—Ç",
                        data=html_content,
                        file_name=f"full_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
                        mime="text/html"
                    )
        
        # JSON –æ—Ç—á–µ—Ç
        with col3:
            if st.button("üìã –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON", use_container_width=True):
                with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö..."):
                    json_data = json.dumps(results, ensure_ascii=False, indent=2, default=str)
                    
                    st.download_button(
                        label="üìã –°–∫–∞—á–∞—Ç—å JSON –¥–∞–Ω–Ω—ã–µ",
                        data=json_data,
                        file_name=f"analysis_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )
        
        st.divider()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.subheader("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**üìä Excel –æ—Ç—á–µ—Ç**")
            st.info("Excel –æ—Ç—á–µ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
            
        with col2:
            st.write("**üìÑ PDF –æ—Ç—á–µ—Ç**") 
            st.info("PDF –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏")

# ================================
# 7. –§–£–¢–ï–† –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô
# ================================

st.markdown("---")

footer_col1, footer_col2, footer_col3 = st.columns(3)

with footer_col1:
    st.markdown("**–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã:** 2.0.0")
    st.markdown("**–°–±–æ—Ä–∫–∞:** MVP-DEMO")

with footer_col2:
    if st.session_state.processing_complete and 'processing_time' in st.session_state.analysis_results:
        processing_time = st.session_state.analysis_results['processing_time']
        st.markdown(f"**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {processing_time:.1f} —Å–µ–∫")
    else:
        st.markdown("**–°—Ç–∞—Ç—É—Å:** –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    try:
        gpu_manager = get_gpu_manager()
        device_info = gpu_manager.get_device_info()
        current_device = device_info.get('current_device', 'CPU')
        st.markdown(f"**–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {current_device}")
    except:
        st.markdown("**–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** CPU")

with footer_col3:
    st.markdown("**¬© 2025 –î–û–ü–†–û–° MVP**")
    st.markdown("**–õ–∏—Ü–µ–Ω–∑–∏—è:** Research Only")

# ================================
# –ë–û–ö–û–í–û–ï –ú–ï–ù–Æ –ù–ê–í–ò–ì–ê–¶–ò–ò (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
# ================================

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ sidebar
with st.sidebar:
    st.divider()
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    st.subheader("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    if st.session_state.processing_complete:
        st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        critical_count = len(st.session_state.analysis_results.get('critical_moments', []))
        if critical_count > 0:
            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {critical_count} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤")
        
        high_stress = st.session_state.analysis_results.get('stress_level', 0) > 0.7
        if high_stress:
            st.error("üö® –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    
    else:
        if st.session_state.uploaded_video_path or st.session_state.demo_mode:
            st.info("‚ñ∂Ô∏è –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª–∏–∑–∞")
        else:
            st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –Ω–∞—á–∞–ª–∞")
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é", use_container_width=True):
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()
    
    if st.session_state.processing_complete:
        if st.button("üíæ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", use_container_width=True):
            st.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("‚ùì –°–ø—Ä–∞–≤–∫–∞"):
        st.write("""
        **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π:**
        
        1. üìπ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ
        2. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
        3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑
        4. üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–∞—Ö
        5. üìà –°–∫–∞—á–∞–π—Ç–µ –æ—Ç—á–µ—Ç—ã
        
        **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - –í–∏–¥–µ–æ: MP4, AVI, MOV, MKV
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2GB
        - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: HD
        """)
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã"):
        st.write("""
        **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:**
        - Email: support@dopros-mvp.ru
        - Telegram: @dopros_support
        - GitHub: github.com/dopros-mvp
        
        **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:**
        - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
        - FAQ –∏ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        """)

# ================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò
# ================================

# –°–∫—Ä—ã—Ç–∏–µ Streamlit —ç–ª–µ–º–µ–Ω—Ç–æ–≤
hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .stDeployButton {display:none;}
    </style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if 'app_initialized' not in st.session_state:
    st.session_state.app_initialized = True
    st.toast("üéâ –î–û–ü–†–û–° MVP 2.0 –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!", icon="‚úÖ")