#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –î–û–ü–†–û–° MVP 2.0
"""

import sys
import os
import subprocess
import argparse
from pathlib import Path


def run_command(cmd, description=""):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\n{'='*60}")
    print(f"üîß {description}")
    print(f"{'='*60}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    print()
    
    result = subprocess.run(cmd, capture_output=False)
    return result.returncode == 0


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –î–û–ü–†–û–° MVP 2.0")
    
    parser.add_argument(
        '--type', 
        choices=['all', 'compatibility', 'unit', 'integration', 'models', 'pipeline', 'performance'],
        default='all',
        help='–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞'
    )
    
    parser.add_argument(
        '--coverage', 
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞'
    )
    
    parser.add_argument(
        '--slow', 
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã'
    )
    
    parser.add_argument(
        '--gpu', 
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å GPU —Ç–µ—Å—Ç—ã'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    parser.add_argument(
        '--parallel', '-n',
        type=int,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'
    )
    
    parser.add_argument(
        '--failed', 
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã'
    )
    
    parser.add_argument(
        '--setup-only', 
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path(__file__).parent
    os.chdir(project_root)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    venv_python = project_root / "venv" / "bin" / "python"
    if not venv_python.exists():
        venv_python = project_root / "venv" / "Scripts" / "python.exe"  # Windows
    
    if not venv_python.exists():
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python -m venv venv && source venv/bin/activate && pip install -r requirements.txt")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É pytest
    result = subprocess.run([str(venv_python), "-c", "import pytest"], 
                          capture_output=True)
    if result.returncode != 0:
        print("‚ùå pytest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install pytest pytest-cov pytest-mock")
        return 1
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    cmd = [str(venv_python), "-m", "pytest"]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    if args.type == 'compatibility':
        cmd.extend(["tests/test_compatibility.py"])
    elif args.type == 'unit':
        cmd.extend(["-m", "unit"])
    elif args.type == 'integration':
        cmd.extend(["-m", "integration"])
    elif args.type == 'models':
        cmd.extend(["tests/test_models.py"])
    elif args.type == 'pipeline':
        cmd.extend(["tests/test_pipeline.py"])
    elif args.type == 'performance':
        cmd.extend(["-m", "performance"])
    else:  # all
        cmd.extend(["tests/"])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
    if args.coverage:
        cmd.extend([
            "--cov=core",
            "--cov=models", 
            "--cov=utils",
            "--cov=integrations",
            "--cov-report=term-missing",
            "--cov-report=html:htmlcov"
        ])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    markers = []
    if not args.slow:
        markers.append("not slow")
    if not args.gpu:
        markers.append("not gpu")
    
    if markers:
        cmd.extend(["-m", " and ".join(markers)])
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if args.parallel:
        cmd.extend(["-n", str(args.parallel)])
    
    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    if args.verbose:
        cmd.extend(["-v", "-s"])
    
    # –¢–æ–ª—å–∫–æ —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã
    if args.failed:
        cmd.extend(["--lf"])
    
    # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if args.setup_only:
        cmd = [str(venv_python), "-m", "pytest", "tests/test_compatibility.py", "-v"]
        success = run_command(cmd, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return 0 if success else 1
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –î–û–ü–†–û–° MVP 2.0")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}")
    print(f"üêç Python: {venv_python}")
    print(f"üì¶ –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {args.type}")
    
    success = run_command(cmd, f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ ({args.type})")
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        if args.coverage:
            print("üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ htmlcov/index.html")
            
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())