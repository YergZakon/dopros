#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
"""

import cv2
import numpy as np
import os
from pathlib import Path
import yaml

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

def test_fer_emotion_analysis():
    """–¢–µ—Å—Ç FER –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π"""
    print("üé≠ –¢–µ—Å—Ç–∏—Ä—É–µ–º FER –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")
    
    try:
        from fer import FER
        detector = FER(mtcnn=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä
        if os.path.exists('test_face_detection.jpg'):
            image = cv2.imread('test_face_detection.jpg')
            result = detector.detect_emotions(image)
            
            print(f"  üìä FER —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} –ª–∏—Ü –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
            if result:
                for i, face_data in enumerate(result):
                    emotions = face_data['emotions']
                    dominant = max(emotions, key=emotions.get)
                    confidence = emotions[dominant]
                    
                    print(f"    üéØ –õ–∏—Ü–æ {i+1}: {dominant} ({confidence:.2%})")
                    print(f"    üìã –í—Å–µ —ç–º–æ—Ü–∏–∏: {emotions}")
                
                return True
            else:
                print("  ‚ùå FER –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —ç–º–æ—Ü–∏–∏")
                return False
        else:
            print("  ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ FER: {e}")
        return False

def test_deepface_emotion_analysis():
    """–¢–µ—Å—Ç DeepFace –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º DeepFace –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")
    
    try:
        from deepface import DeepFace
        
        if os.path.exists('test_face_detection.jpg'):
            result = DeepFace.analyze(
                img_path='test_face_detection.jpg',
                actions=['emotion'],
                enforce_detection=False,
                silent=True
            )
            
            print(f"  üìä DeepFace —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω")
            
            if isinstance(result, list):
                result = result[0] if result else None
            
            if result and 'emotion' in result:
                emotions = result['emotion']
                dominant = max(emotions, key=emotions.get)
                confidence = emotions[dominant]
                
                print(f"    üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {dominant} ({confidence:.1f}%)")
                print(f"    üìã –í—Å–µ —ç–º–æ—Ü–∏–∏: {emotions}")
                
                return True
            else:
                print("  ‚ùå DeepFace –Ω–µ –≤–µ—Ä–Ω—É–ª —ç–º–æ—Ü–∏–∏")
                return False
        else:
            print("  ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ DeepFace: {e}")
        return False

def test_yolo_model_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ YOLO –º–æ–¥–µ–ª–∏"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É YOLO –º–æ–¥–µ–ª–∏...")
    
    try:
        from ultralytics import YOLO
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å
        if os.path.exists('yolo11n.pt'):
            model = YOLO('yolo11n.pt')
            print(f"  ‚úÖ YOLO –º–æ–¥–µ–ª—å yolo11n.pt –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            print(f"  üìã –ó–∞–¥–∞—á–∞: {model.task}")
            print(f"  üìã –ö–ª–∞—Å—Å—ã: {len(model.names)} ({list(model.names.values())[:5]}...)")
            return True
        else:
            print("  ‚ùå –ú–æ–¥–µ–ª—å yolo11n.pt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ YOLO: {e}")
        return False

def check_config_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        with open('config.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
        models = config.get('processing', {}).get('models', {})
        
        print("  üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π:")
        
        # YOLO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        yolo_config = models.get('yolo', {}).get('models', {})
        print(f"    üéØ YOLO –ª–∏—Ü–∞: {yolo_config.get('face', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"    üéØ YOLO —ç–º–æ—Ü–∏–∏: {yolo_config.get('emotion', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        # DeepFace –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        deepface_config = models.get('deepface', {})
        print(f"    üß† DeepFace –≤–∫–ª—é—á–µ–Ω: {deepface_config.get('enabled', False)}")
        print(f"    üß† DeepFace backend: {deepface_config.get('backend', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        # FER –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        fer_config = models.get('fer', {})
        print(f"    üé≠ FER –≤–∫–ª—é—á–µ–Ω: {fer_config.get('enabled', False)}")
        print(f"    üé≠ FER MTCNN: {fer_config.get('mtcnn', False)}")
        
        # –ü–æ—Ä–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞
        analysis_config = config.get('analysis', {})
        print(f"  üìä –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π: {analysis_config.get('emotion_change_threshold', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return False

def check_required_packages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã...")
    
    packages = {
        'cv2': 'OpenCV',
        'fer': 'FER', 
        'deepface': 'DeepFace',
        'ultralytics': 'YOLO',
        'tensorflow': 'TensorFlow',
        'torch': 'PyTorch'
    }
    
    results = {}
    
    for package, name in packages.items():
        try:
            __import__(package)
            print(f"  ‚úÖ {name}")
            results[package] = True
        except ImportError:
            print(f"  ‚ùå {name}")
            results[package] = False
    
    return all(results.values())

if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    packages_ok = check_required_packages()
    config_ok = check_config_settings()
    yolo_ok = test_yolo_model_loading()
    fer_ok = test_fer_emotion_analysis()
    deepface_ok = test_deepface_emotion_analysis()
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
    print(f"  üì¶ –ü–∞–∫–µ—Ç—ã: {'‚úÖ' if packages_ok else '‚ùå'}")
    print(f"  ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if config_ok else '‚ùå'}")
    print(f"  üéØ YOLO: {'‚úÖ' if yolo_ok else '‚ùå'}")
    print(f"  üé≠ FER: {'‚úÖ' if fer_ok else '‚ùå'}")
    print(f"  üß† DeepFace: {'‚úÖ' if deepface_ok else '‚ùå'}")
    
    working_methods = sum([fer_ok, deepface_ok, yolo_ok])
    
    if working_methods >= 1:
        print(f"üéâ –ï—Å—Ç—å {working_methods} —Ä–∞–±–æ—á–∏—Ö –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π!")
        if not fer_ok or not deepface_ok:
            print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏")
    else:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")