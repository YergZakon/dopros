#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç FER –±–µ–∑ TensorFlow –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
"""

import cv2
import os

def test_fer_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç FER"""
    print("üé≠ –¢–µ—Å—Ç–∏—Ä—É–µ–º FER...")
    
    try:
        from fer import FER
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
        detector = FER()
        print("  ‚úÖ FER –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–∞–¥—Ä–µ
        if os.path.exists('test_face_detection.jpg'):
            image = cv2.imread('test_face_detection.jpg')
            print(f"  üì∑ –ö–∞–¥—Ä –∑–∞–≥—Ä—É–∂–µ–Ω: {image.shape}")
            
            result = detector.detect_emotions(image)
            print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} –ª–∏—Ü")
            
            if result:
                for i, face in enumerate(result):
                    emotions = face['emotions']
                    dominant = max(emotions, key=emotions.get)
                    conf = emotions[dominant]
                    print(f"    üéØ –õ–∏—Ü–æ {i+1}: {dominant} ({conf:.2%})")
                
                return True
            else:
                print("  ‚ùå FER –Ω–µ –Ω–∞—à–µ–ª –ª–∏—Ü–∞")
                return False
        else:
            print("  ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_fer_simple()